# Generated by Django 3.1 on 2020-11-03 18:49

import bot_app.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('NB', 'Montagem Bike Nova'), ('EB', 'Montagem Bike Ergométrica'), ('ET', 'Revisão Expert'), ('SS', 'Serviço Select'), ('FN', 'Pneu Furado Bike Não Elétrica'), ('FE', 'Pneu Furado Bike Elétrica')], default='SS', help_text='Tipo de serviço', max_length=2)),
                ('date_scheduled', models.DateTimeField(help_text='Data da realização do serviço', validators=[bot_app.validators.validate_date])),
                ('status', models.CharField(choices=[('FI', 'Finalizado'), ('ST', 'Iniciado'), ('RE', 'Reagendar'), ('WI', 'Endereço incorreto')], default='ST', help_text='Status do serviço', max_length=2)),
                ('comments', models.TextField(blank=True, help_text='Observações sobre o serviço')),
                ('address', models.CharField(blank=True, help_text='Endereço do serviço, com número. Ex: Rua das Rosas, 210', max_length=200)),
                ('complement', models.CharField(blank=True, help_text='Complemento do endereço, se houver', max_length=200)),
                ('city', models.CharField(blank=True, help_text='Cidade', max_length=50)),
                ('state', models.CharField(blank=True, choices=[('SP', 'São Paulo'), ('RJ', 'Rio de Janeiro'), ('MG', 'Minas Gerais'), ('RS', 'Rio Grande do Sul'), ('PR', 'Paraná'), ('SC', 'Santa Catarina'), ('BA', 'Bahia'), ('DF', 'Distrito Federal'), ('GO', 'Goiás'), ('PE', 'Pernambuco'), ('PA', 'Pará'), ('CE', 'Ceará'), ('MT', 'Mato Grosso'), ('ES', 'Espírito Santo'), ('MS', 'Mato Grosso do Sul'), ('AM', 'Amazonas'), ('MA', 'Maranhão'), ('RN', 'Rio Grande do Norte'), ('PB', 'Paraíba'), ('AL', 'Alagoas'), ('PI', 'Piauí'), ('RO', 'Rondônia'), ('SE', 'Sergipe'), ('TO', 'Tocantins'), ('AP', 'Amapá'), ('AC', 'Acre'), ('RR', 'Roraima')], help_text='Estado', max_length=2)),
                ('zip_code', models.CharField(blank=True, help_text='CEP', max_length=10)),
                ('reference', models.CharField(blank=True, help_text='Referência. Ex: Próximo ao metrô Ana Rosa', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome', max_length=150)),
                ('phone_number', models.CharField(help_text='Número de telefone celular com DDD, somente números', max_length=15, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mechanic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nome', max_length=150)),
                ('phone_number', models.CharField(help_text='Número de telefone celular com DDD, somente números', max_length=15, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('cpf', models.CharField(blank=True, help_text='CPF, sem pontos ou traços', max_length=11)),
                ('rg', models.CharField(blank=True, help_text='RG, sem pontos ou traços', max_length=14)),
                ('address', models.CharField(blank=True, help_text='Endereço, com número. Ex: Rua das Rosas, 210', max_length=200)),
                ('complement', models.CharField(blank=True, help_text='Complemento do endereço, se houver', max_length=200)),
                ('city', models.CharField(blank=True, help_text='Cidade', max_length=50)),
                ('state', models.CharField(blank=True, choices=[('SP', 'São Paulo'), ('RJ', 'Rio de Janeiro'), ('MG', 'Minas Gerais'), ('RS', 'Rio Grande do Sul'), ('PR', 'Paraná'), ('SC', 'Santa Catarina'), ('BA', 'Bahia'), ('DF', 'Distrito Federal'), ('GO', 'Goiás'), ('PE', 'Pernambuco'), ('PA', 'Pará'), ('CE', 'Ceará'), ('MT', 'Mato Grosso'), ('ES', 'Espírito Santo'), ('MS', 'Mato Grosso do Sul'), ('AM', 'Amazonas'), ('MA', 'Maranhão'), ('RN', 'Rio Grande do Norte'), ('PB', 'Paraíba'), ('AL', 'Alagoas'), ('PI', 'Piauí'), ('RO', 'Rondônia'), ('SE', 'Sergipe'), ('TO', 'Tocantins'), ('AP', 'Amapá'), ('AC', 'Acre'), ('RR', 'Roraima')], help_text='Estado', max_length=2)),
                ('zip_code', models.CharField(blank=True, help_text='CEP', max_length=10)),
                ('bank', models.CharField(blank=True, help_text='Banco', max_length=50)),
                ('branch', models.CharField(blank=True, help_text='Agência', max_length=10)),
                ('account_number', models.CharField(blank=True, help_text='Número da conta', max_length=15)),
                ('account_owner_name', models.CharField(help_text='Nome do proprietário da conta', max_length=100)),
                ('owner_id', models.CharField(help_text='CPF ou CNPJ do proprietário da conta', max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('rating', models.IntegerField(help_text='Nota dada pelo cliente ao serviço', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Comentário')),
                ('appointment', models.ForeignKey(help_text='Serviço', on_delete=django.db.models.deletion.CASCADE, to='bot_app.appointment')),
                ('mechanic', models.ForeignKey(help_text='Mecânico que realizou o serviço', on_delete=django.db.models.deletion.CASCADE, to='bot_app.mechanic')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text='Mensagem do cliente')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(help_text='Cliente que enviou a mensagem', on_delete=django.db.models.deletion.CASCADE, to='bot_app.customer')),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='customer',
            field=models.ForeignKey(help_text='Cliente', null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot_app.customer'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='mechanic',
            field=models.ForeignKey(help_text='Mecânico responsável pelo serviço', null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot_app.mechanic'),
        ),
    ]
